// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gfjAdNoHd7G3Pf1RsDsNSf
// Component: QoAbXKeHub

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ToggleButtonGroup } from "@mui/material"; // plasmic-import: iCqy94SVOm5/codeComponent
import { Tooltip } from "@mui/material"; // plasmic-import: e9CRcnxSKl/codeComponent
import { ToggleButton } from "@mui/material"; // plasmic-import: uAsm7Dvkj0u/codeComponent
import { Icon } from "@/components/Icon"; // plasmic-import: 5ekxQj4ldyA/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: mYGlLbIkFyE55/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_design_system.module.css"; // plasmic-import: gfjAdNoHd7G3Pf1RsDsNSf/projectcss
import sty from "./PlasmicDrawing2D.module.css"; // plasmic-import: QoAbXKeHub/css

export type PlasmicDrawing2D__VariantMembers = {};
export type PlasmicDrawing2D__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawing2D__VariantsArgs;
export const PlasmicDrawing2D__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawing2D__ArgsType = {};
type ArgPropType = keyof PlasmicDrawing2D__ArgsType;
export const PlasmicDrawing2D__ArgProps = new Array<ArgPropType>();

export type PlasmicDrawing2D__OverridesType = {
  root?: p.Flex<"div">;
  toggleButtonGroup?: p.Flex<typeof ToggleButtonGroup>;
  tooltip?: p.Flex<typeof Tooltip>;
  toggleButton?: p.Flex<typeof ToggleButton>;
  icon?: p.Flex<typeof Icon>;
};

export interface DefaultDrawing2DProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDrawing2D__RenderFunc(props: {
  variants: PlasmicDrawing2D__VariantsArgs;
  args: PlasmicDrawing2D__ArgsType;
  overrides: PlasmicDrawing2D__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "currentTool",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "moveTool" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <ToggleButtonGroup
              data-plasmic-name={"toggleButtonGroup"}
              data-plasmic-override={overrides.toggleButtonGroup}
              className={classNames("__wab_instance", sty.toggleButtonGroup)}
              color={"primary" as const}
              exclusive={true}
              size={"medium" as const}
              value={(() => {
                try {
                  return $state.currentTool;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(
                (() => {
                  try {
                    return [
                      {
                        tooltip: "Перемещение",
                        value: "moveTool",
                        icon: "ArrowMoveRegular"
                      },
                      {
                        tooltip: "Выделение",
                        value: "selectionTool",
                        icon: "CursorRegular"
                      },
                      {
                        tooltip: "Метка",
                        value: "pointerTool",
                        icon: "LocationRegular"
                      },
                      {
                        tooltip: "Текст",
                        value: "textTool",
                        icon: "TextTRegular"
                      },
                      {
                        tooltip: "Карандаш",
                        value: "pencilTool",
                        icon: "EditRegular"
                      },
                      {
                        tooltip: "Стрелка",
                        value: "arrowTool",
                        icon: "ArrowUpLeftRegular"
                      },
                      {
                        tooltip: "Линия",
                        value: "lineTool",
                        icon: "LineRegular"
                      },
                      {
                        tooltip: "Крестик",
                        value: "crossTool",
                        icon: "DismissRegular"
                      },
                      {
                        tooltip: "Прямоугольник",
                        value: "rectangleTool",
                        icon: "SquareRegular"
                      },
                      {
                        tooltip: "Овал",
                        value: "ellipseTool",
                        icon: "CircleRegular"
                      }
                    ];
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return [];
                    }
                    throw e;
                  }
                })() ?? []
              ).map((currentItem, currentIndex) => (
                <Tooltip
                  data-plasmic-name={"tooltip"}
                  data-plasmic-override={overrides.tooltip}
                  className={classNames("__wab_instance", sty.tooltip)}
                  key={currentIndex}
                  placement={"bottom" as const}
                  title={(() => {
                    try {
                      return currentItem.tooltip;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <ToggleButton
                    data-plasmic-name={"toggleButton"}
                    data-plasmic-override={overrides.toggleButton}
                    className={classNames("__wab_instance", sty.toggleButton)}
                    onClick={async () => {
                      const $steps = {};
                      $steps["updateCurrentTool"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "gnNNJaBxy",
                                  componentUuid: "QoAbXKeHub",
                                  argName: "variable"
                                },
                                () => ({
                                  objRoot: $state,
                                  variablePath: ["currentTool"]
                                })
                              ),
                              operation: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "gnNNJaBxy",
                                  componentUuid: "QoAbXKeHub",
                                  argName: "operation"
                                },
                                () => 0
                              ),
                              value: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "updateVariable",
                                  interactionUuid: "gnNNJaBxy",
                                  componentUuid: "QoAbXKeHub",
                                  argName: "value"
                                },
                                () => currentItem.value
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "gnNNJaBxy",
                                componentUuid: "QoAbXKeHub"
                              },
                              () =>
                                (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateCurrentTool"] === "object" &&
                        typeof $steps["updateCurrentTool"].then === "function"
                      ) {
                        $steps["updateCurrentTool"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "gnNNJaBxy",
                            componentUuid: "QoAbXKeHub"
                          },
                          $steps["updateCurrentTool"]
                        );
                      }
                    }}
                    selected={(() => {
                      try {
                        return currentItem.value === $state.currentTool;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    value={(() => {
                      try {
                        return currentItem.value;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <Icon
                      data-plasmic-name={"icon"}
                      data-plasmic-override={overrides.icon}
                      className={classNames("__wab_instance", sty.icon)}
                      name={(() => {
                        try {
                          return currentItem.icon;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return ``;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </ToggleButton>
                </Tooltip>
              ))}
            </ToggleButtonGroup>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "toggleButtonGroup", "tooltip", "toggleButton", "icon"],
  toggleButtonGroup: ["toggleButtonGroup", "tooltip", "toggleButton", "icon"],
  tooltip: ["tooltip", "toggleButton", "icon"],
  toggleButton: ["toggleButton", "icon"],
  icon: ["icon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  toggleButtonGroup: typeof ToggleButtonGroup;
  tooltip: typeof Tooltip;
  toggleButton: typeof ToggleButton;
  icon: typeof Icon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawing2D__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawing2D__VariantsArgs;
    args?: PlasmicDrawing2D__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawing2D__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDrawing2D__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDrawing2D__ArgProps,
          internalVariantPropNames: PlasmicDrawing2D__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrawing2D__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrawing2D";
  } else {
    func.displayName = `PlasmicDrawing2D.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawing2D = Object.assign(
  // Top-level PlasmicDrawing2D renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    toggleButtonGroup: makeNodeComponent("toggleButtonGroup"),
    tooltip: makeNodeComponent("tooltip"),
    toggleButton: makeNodeComponent("toggleButton"),
    icon: makeNodeComponent("icon"),

    // Metadata about props expected for PlasmicDrawing2D
    internalVariantProps: PlasmicDrawing2D__VariantProps,
    internalArgProps: PlasmicDrawing2D__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDrawing2D;
/* prettier-ignore-end */
