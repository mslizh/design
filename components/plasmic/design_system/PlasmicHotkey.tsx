// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gfjAdNoHd7G3Pf1RsDsNSf
// Component: S5KYVe8a0M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Stack } from "@mui/material"; // plasmic-import: d1ojXTCoC5/codeComponent
import { Typography } from "@mui/material"; // plasmic-import: Bigyp_NHFbt/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_design_system.module.css"; // plasmic-import: gfjAdNoHd7G3Pf1RsDsNSf/projectcss
import sty from "./PlasmicHotkey.module.css"; // plasmic-import: S5KYVe8a0M/css

export type PlasmicHotkey__VariantMembers = {};
export type PlasmicHotkey__VariantsArgs = {};
type VariantPropType = keyof PlasmicHotkey__VariantsArgs;
export const PlasmicHotkey__VariantProps = new Array<VariantPropType>();

export type PlasmicHotkey__ArgsType = {
  title?: string;
  edge?: string;
};
type ArgPropType = keyof PlasmicHotkey__ArgsType;
export const PlasmicHotkey__ArgProps = new Array<ArgPropType>("title", "edge");

export type PlasmicHotkey__OverridesType = {
  root?: p.Flex<typeof Stack>;
  typography?: p.Flex<typeof Typography>;
};

export interface DefaultHotkeyProps {
  title?: string;
  edge?: string;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHotkey__RenderFunc(props: {
  variants: PlasmicHotkey__VariantsArgs;
  args: PlasmicHotkey__ArgsType;
  overrides: PlasmicHotkey__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Ctrl + K" as const
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <Stack
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      bgcolor={"grey.100" as const}
      borderRadius={"4px" as const}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      marginLeft={(() => {
        try {
          return $props.edge === "start" && -0.75;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      marginRight={(() => {
        try {
          return $props.edge === "end" && -0.75;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      paddingX={0.5 as const}
      paddingY={0.25 as const}
    >
      <Typography
        data-plasmic-name={"typography"}
        data-plasmic-override={overrides.typography}
        children={(() => {
          try {
            return $props.title;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return ``;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.typography)}
        color={"text.secondary" as const}
        variant={"caption" as const}
      />
    </Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "typography"],
  typography: ["typography"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Stack;
  typography: typeof Typography;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHotkey__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHotkey__VariantsArgs;
    args?: PlasmicHotkey__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHotkey__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHotkey__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHotkey__ArgProps,
          internalVariantPropNames: PlasmicHotkey__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHotkey__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHotkey";
  } else {
    func.displayName = `PlasmicHotkey.${nodeName}`;
  }
  return func;
}

export const PlasmicHotkey = Object.assign(
  // Top-level PlasmicHotkey renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    typography: makeNodeComponent("typography"),

    // Metadata about props expected for PlasmicHotkey
    internalVariantProps: PlasmicHotkey__VariantProps,
    internalArgProps: PlasmicHotkey__ArgProps
  }
);

export default PlasmicHotkey;
/* prettier-ignore-end */
