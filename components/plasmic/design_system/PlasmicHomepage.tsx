// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gfjAdNoHd7G3Pf1RsDsNSf
// Component: 7nf0FyosBLxT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { List } from "@mui/material"; // plasmic-import: qPyf2BvmO1n/codeComponent
import { WithToast } from "@/components/Toaster"; // plasmic-import: nhftCVhQNA/codeComponent
import { ListItem } from "@mui/material"; // plasmic-import: aB9WZ1p1Dc5/codeComponent
import { ListItemButton } from "@mui/material"; // plasmic-import: iHy3Erb07Jt/codeComponent
import { ListItemIcon } from "@mui/material"; // plasmic-import: JrtN49VL5v_/codeComponent
import { Icon } from "@/components/Icon"; // plasmic-import: K-4mZ5X0Et2/codeComponent
import { ListItemText } from "@mui/material"; // plasmic-import: aj2_DNmPd3t/codeComponent
import { Divider } from "@mui/material"; // plasmic-import: OHPtLicOEy/codeComponent
import { Scheduler } from "@/components/Scheduler"; // plasmic-import: 3Kt6jTcdD4/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: mYGlLbIkFyE55/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_design_system.module.css"; // plasmic-import: gfjAdNoHd7G3Pf1RsDsNSf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7nf0FyosBLxT/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  withToast?: p.Flex<typeof WithToast>;
  divider?: p.Flex<typeof Divider>;
  scheduler?: p.Flex<typeof Scheduler>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  useDependencyAwareQuery({
    name: "menuItems",
    getDataOp: () => ({
      sourceId: "wKVMb2JWd9S48BYLES4Hzd",
      opId: "2074e256218920375950d10d8e61418bb4e939ea69a57a5748a376a8bf39411a4cd091d3d604d52f80bee232c7163eb96561423cbea4b115ad4cdb2b6bda9680fed3119d1a50675bb4008acad29561399f67cb",
      userArgs: {},
      cacheKey: "plasmic.$.fQ-KMpWHu.$.",
      invalidatedKeys: ["plasmic_refresh_all"],
      roleId: null
    }),
    $queries,
    setDollarQueries
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__rvk0H)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xd5Z)}
                  >
                    <List
                      className={classNames("__wab_instance", sty.list__qJcU6)}
                    >
                      <WithToast
                        data-plasmic-name={"withToast"}
                        data-plasmic-override={overrides.withToast}
                        className={classNames("__wab_instance", sty.withToast)}
                        message={"Hello" as const}
                      >
                        {(
                          (() => {
                            try {
                              return $queries.menuItems.data;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return [];
                              }
                              throw e;
                            }
                          })() ?? []
                        ).map((currentItem, currentIndex) => (
                          <ListItem
                            className={classNames(
                              "__wab_instance",
                              sty.listItem__xqeBw
                            )}
                            disablePadding={true}
                            key={currentIndex}
                          >
                            <ListItemButton
                              className={classNames(
                                "__wab_instance",
                                sty.listItemButton__kVfxb
                              )}
                              selected={(() => {
                                try {
                                  return currentIndex === 0;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <ListItemIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.listItemIcon__dWwK
                                )}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon__yfqtw
                                  )}
                                  name={(() => {
                                    try {
                                      return `${currentItem.icon}20Regular`;
                                    } catch (e) {
                                      if (e instanceof TypeError) {
                                        return "LocationRegular";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </ListItemIcon>
                              <ListItemText
                                className={classNames(
                                  "__wab_instance",
                                  sty.listItemText__iuJzW
                                )}
                                primary={(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Menu Item";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </WithToast>
                    </List>
                    <List
                      className={classNames("__wab_instance", sty.list__crUPf)}
                    >
                      {(
                        (() => {
                          try {
                            return [
                              {
                                title: "Настройки",
                                icon: "Settings20Regular"
                              },
                              {
                                title: "Помощь",
                                icon: "QuestionCircle20Regular"
                              }
                            ];
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })() ?? []
                      ).map((currentItem, currentIndex) => (
                        <ListItem
                          className={classNames(
                            "__wab_instance",
                            sty.listItem__aTyAc
                          )}
                          disablePadding={true}
                          key={currentIndex}
                        >
                          <ListItemButton
                            className={classNames(
                              "__wab_instance",
                              sty.listItemButton__chxVe
                            )}
                          >
                            <ListItemIcon
                              className={classNames(
                                "__wab_instance",
                                sty.listItemIcon__vylnb
                              )}
                            >
                              <Icon
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon__amgrN
                                )}
                                name={(() => {
                                  try {
                                    return currentItem.icon;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "LocationRegular";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </ListItemIcon>
                            <ListItemText
                              className={classNames(
                                "__wab_instance",
                                sty.listItemText__p8LKj
                              )}
                              primary={(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "Some text…";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </ListItemButton>
                        </ListItem>
                      ))}
                    </List>
                  </div>
                ) : null}
                <Divider
                  data-plasmic-name={"divider"}
                  data-plasmic-override={overrides.divider}
                  className={classNames("__wab_instance", sty.divider)}
                  orientation={"vertical" as const}
                />

                <Scheduler
                  data-plasmic-name={"scheduler"}
                  data-plasmic-override={overrides.scheduler}
                  className={classNames("__wab_instance", sty.scheduler)}
                />
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "withToast", "divider", "scheduler"],
  withToast: ["withToast"],
  divider: ["divider"],
  scheduler: ["scheduler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  withToast: typeof WithToast;
  divider: typeof Divider;
  scheduler: typeof Scheduler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    withToast: makeNodeComponent("withToast"),
    divider: makeNodeComponent("divider"),
    scheduler: makeNodeComponent("scheduler"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
