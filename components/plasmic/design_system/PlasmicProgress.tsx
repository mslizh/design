// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gfjAdNoHd7G3Pf1RsDsNSf
// Component: aDgYNbjSiH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AppBar } from "@mui/material"; // plasmic-import: Bnd16ek3Mr/codeComponent
import { Toolbar } from "@mui/material"; // plasmic-import: RIYKguxp0O/codeComponent
import { IconButton } from "@mui/material"; // plasmic-import: A-nNYdAJPIC/codeComponent
import { Icon } from "@/components/Icon"; // plasmic-import: 5ekxQj4ldyA/codeComponent
import { Typography } from "@mui/material"; // plasmic-import: Bigyp_NHFbt/codeComponent
import { Stack } from "@mui/material"; // plasmic-import: d1ojXTCoC5/codeComponent
import { Tooltip } from "@mui/material"; // plasmic-import: e9CRcnxSKl/codeComponent
import { Divider } from "@mui/material"; // plasmic-import: AeIJFGAuMAy/codeComponent
import { CircularProgress } from "@mui/material"; // plasmic-import: W_Unr1IEQD/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_design_system.module.css"; // plasmic-import: gfjAdNoHd7G3Pf1RsDsNSf/projectcss
import sty from "./PlasmicProgress.module.css"; // plasmic-import: aDgYNbjSiH/css

export type PlasmicProgress__VariantMembers = {};
export type PlasmicProgress__VariantsArgs = {};
type VariantPropType = keyof PlasmicProgress__VariantsArgs;
export const PlasmicProgress__VariantProps = new Array<VariantPropType>();

export type PlasmicProgress__ArgsType = {};
type ArgPropType = keyof PlasmicProgress__ArgsType;
export const PlasmicProgress__ArgProps = new Array<ArgPropType>();

export type PlasmicProgress__OverridesType = {
  root?: p.Flex<"div">;
  appBar?: p.Flex<typeof AppBar>;
  toolbar?: p.Flex<typeof Toolbar>;
  typography?: p.Flex<typeof Typography>;
  tooltip?: p.Flex<typeof Tooltip>;
  divider?: p.Flex<typeof Divider>;
  circularProgress?: p.Flex<typeof CircularProgress>;
};

export interface DefaultProgressProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProgress__RenderFunc(props: {
  variants: PlasmicProgress__VariantsArgs;
  args: PlasmicProgress__ArgsType;
  overrides: PlasmicProgress__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <AppBar
            data-plasmic-name={"appBar"}
            data-plasmic-override={overrides.appBar}
            className={classNames("__wab_instance", sty.appBar)}
            elevation={1 as const}
            position={"fixed" as const}
          >
            <Toolbar
              data-plasmic-name={"toolbar"}
              data-plasmic-override={overrides.toolbar}
              className={classNames("__wab_instance", sty.toolbar)}
              disableGutters={false}
              variant={"regular" as const}
            >
              <IconButton
                className={classNames("__wab_instance", sty.iconButton__uNgBa)}
                edge={"start" as const}
                size={"medium" as const}
              >
                <Icon
                  className={classNames("__wab_instance", sty.icon__a12)}
                  name={"ArrowLeftRegular" as const}
                />
              </IconButton>
              <Typography
                data-plasmic-name={"typography"}
                data-plasmic-override={overrides.typography}
                children={"Очень длинный заголовок" as const}
                className={classNames("__wab_instance", sty.typography)}
                sx={{ flexGrow: 1 }}
                variant={"subtitle2" as const}
              />

              <Stack
                className={classNames("__wab_instance", sty.stack__dDqJq)}
                direction={"row" as const}
                marginRight={-1 as const}
              >
                {(
                  (() => {
                    try {
                      return [
                        {
                          icon: "AddRegular",
                          tooltip: "Создать"
                        },
                        {
                          icon: "FilterRegular",
                          tooltip: "Фильтр"
                        },
                        {
                          icon: "DocumentAddRegular",
                          tooltip: "Сформировать документ"
                        }
                      ];
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <Tooltip
                    data-plasmic-name={"tooltip"}
                    data-plasmic-override={overrides.tooltip}
                    className={classNames("__wab_instance", sty.tooltip)}
                    key={currentIndex}
                    placement={"bottom" as const}
                    title={(() => {
                      try {
                        return currentItem.tooltip;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <IconButton
                      className={classNames(
                        "__wab_instance",
                        sty.iconButton__jMzF
                      )}
                    >
                      <Icon
                        className={classNames(
                          "__wab_instance",
                          sty.icon___85GwD
                        )}
                        name={(() => {
                          try {
                            return currentItem.icon;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return ``;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </IconButton>
                  </Tooltip>
                ))}
              </Stack>
            </Toolbar>
            <Divider
              data-plasmic-name={"divider"}
              data-plasmic-override={overrides.divider}
              className={classNames("__wab_instance", sty.divider)}
            />
          </AppBar>
          <Stack className={classNames("__wab_instance", sty.stack__akARr)}>
            <CircularProgress
              data-plasmic-name={"circularProgress"}
              data-plasmic-override={overrides.circularProgress}
              className={classNames("__wab_instance", sty.circularProgress)}
              color={"primary" as const}
              variant={"indeterminate" as const}
            />
          </Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appBar",
    "toolbar",
    "typography",
    "tooltip",
    "divider",
    "circularProgress"
  ],
  appBar: ["appBar", "toolbar", "typography", "tooltip", "divider"],
  toolbar: ["toolbar", "typography", "tooltip"],
  typography: ["typography"],
  tooltip: ["tooltip"],
  divider: ["divider"],
  circularProgress: ["circularProgress"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appBar: typeof AppBar;
  toolbar: typeof Toolbar;
  typography: typeof Typography;
  tooltip: typeof Tooltip;
  divider: typeof Divider;
  circularProgress: typeof CircularProgress;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProgress__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProgress__VariantsArgs;
    args?: PlasmicProgress__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProgress__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProgress__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProgress__ArgProps,
          internalVariantPropNames: PlasmicProgress__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProgress__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProgress";
  } else {
    func.displayName = `PlasmicProgress.${nodeName}`;
  }
  return func;
}

export const PlasmicProgress = Object.assign(
  // Top-level PlasmicProgress renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appBar: makeNodeComponent("appBar"),
    toolbar: makeNodeComponent("toolbar"),
    typography: makeNodeComponent("typography"),
    tooltip: makeNodeComponent("tooltip"),
    divider: makeNodeComponent("divider"),
    circularProgress: makeNodeComponent("circularProgress"),

    // Metadata about props expected for PlasmicProgress
    internalVariantProps: PlasmicProgress__VariantProps,
    internalArgProps: PlasmicProgress__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProgress;
/* prettier-ignore-end */
